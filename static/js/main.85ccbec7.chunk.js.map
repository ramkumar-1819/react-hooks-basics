{"version":3,"sources":["Hook.jsx","App.js","reportWebVitals.js","index.js"],"names":["themes","light","foreground","background","dark","mycontext","createContext","Hook","useState","count","SetCount","count1","SetCount1","me","sibling","state","setState","effect","SetEffect","theme","useContext","style","setStyle","useEffect","document","title","onClick","prevCount","prevCount1","prev","color","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"mOACMA,EAAS,CACXC,MAAO,CACLC,WAAY,UACZC,WAAY,WAEdC,KAAM,CACJF,WAAY,UACZC,WAAY,YAKZE,EAAUC,wBAAcN,GAEf,SAASO,IAAO,IAAD,EACHC,mBAAS,IADN,mBACnBC,EADmB,KACbC,EADa,OAEDF,mBAAS,IAFR,mBAEnBG,EAFmB,KAEZC,EAFY,OAIHJ,mBAAS,CAACK,GAAG,GAAGC,QAAQ,KAJrB,mBAInBC,EAJmB,KAIbC,EAJa,OAMFR,mBAAS,GANP,mBAMpBS,EANoB,KAMbC,EANa,KASpBC,EAAMC,qBAAWf,GATG,EAUJG,mBAAS,SAVL,mBAUpBa,EAVoB,KAUdC,EAVc,KAY1BC,qBAAU,WACNC,SAASC,MAAT,sBAA8BR,EAA9B,aAKJ,OACO,qCACA,oEACA,6CAAgBR,EAAhB,gBACA,yCAAYE,EAAZ,eACA,wBAAQe,QAAS,kBAAIhB,GAAS,SAAAiB,GAAS,OAAEA,EAAU,MAAnD,uBACA,wBAAQD,QAAS,kBAAId,GAAU,SAAAgB,GAAU,OAAEA,EAAW,MAAtD,2BAEA,oEACA,6CAAgBb,EAAMF,GAAtB,gBACA,yCAAYE,EAAMD,QAAlB,eACA,wBAAQY,QAAS,kBAAIV,GAAS,SAAAa,GAAI,kCAAOA,GAAP,IAAYhB,GAAGgB,EAAKhB,GAAG,QAAzD,sBACA,wBAAQa,QAAS,kBAAIV,GAAS,SAAAa,GAAI,kCAAOA,GAAP,IAAYf,QAAQe,EAAKf,QAAQ,QAAnE,0BAEA,2CACA,wBAAQY,QAAS,kBAAIR,GAAU,SAAAW,GAAI,OAAEA,EAAK,MAA1C,0BAEA,4CACA,oBAAIR,MAAO,CAAClB,WAAWgB,EAAME,GAAOlB,WAAW2B,MAAMX,EAAME,GAAOnB,YAAlE,mBACA,wBAAQwB,QAtBG,WACdJ,EAAiB,UAARD,EAAgB,OAAO,UAqB7B,6BC7CIU,MAJf,WACE,OAAQ,cAACxB,EAAD,KCQKyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFnB,SAASoB,eAAe,SAM1BZ,M","file":"static/js/main.85ccbec7.chunk.js","sourcesContent":["import React, { Component,useState,useEffect,createContext,useContext } from 'react';\r\nconst themes = {\r\n    light: {\r\n      foreground: '#000000',\r\n      background: '#eeeeee',\r\n    },\r\n    dark: {\r\n      foreground: '#ffffff',\r\n      background: '#222222',\r\n    },\r\n  };\r\n\r\n\r\nconst mycontext=createContext(themes)         //creating context initially\r\n\r\nexport default function Hook(){\r\n    const [count,SetCount]=useState(23);        //useState hook for my age\r\n    const [count1,SetCount1]=useState(13);      //useState hook for my sibling\r\n\r\n    const [state,setState]=useState({me:23,sibling:13})  //useState hook with object as value\r\n\r\n    const[effect,SetEffect]=useState(0);      //this useState for title \r\n\r\n    \r\n    const theme=useContext(mycontext);         //geting the context created using useContext\r\n    const[style,setStyle]=useState('light')    \r\n\r\n    useEffect(()=>{                          //useEffect hook to change the title after every button clicked\r\n        document.title=`You Clicked ${effect} times` \r\n    })\r\n    const changeColor=()=>{                     //this function is to set color that we used in context \r\n        setStyle(style==='light'?'dark':'light')\r\n    }\r\n    return(\r\n           <>\r\n           <h1>USESTATE - Using Separate UseState</h1>\r\n           <h3>Today I am {count} years old</h3>\r\n           <h3>I have {count1} Siblings</h3>\r\n           <button onClick={()=>SetCount(prevCount=>prevCount+1)}>Get Older</button>\r\n           <button onClick={()=>SetCount1(prevCount1=>prevCount1+1)}>More Siblings</button>\r\n           \r\n           <h1>USESTATE - Using Object as a state</h1>\r\n           <h3>Today I am {state.me} years old</h3>\r\n           <h3>I have {state.sibling} Siblings</h3>\r\n           <button onClick={()=>setState(prev=>({...prev,me:prev.me+1}))}>GetOlder</button>\r\n           <button onClick={()=>setState(prev=>({...prev,sibling:prev.sibling+1}))}>More Sibling</button>\r\n           \r\n           <h1>USEEFFECT</h1>\r\n           <button onClick={()=>SetEffect(prev=>prev+1)}>Change Title</button>\r\n           \r\n           <h1>USECONTEXT</h1>\r\n           <h3 style={{background:theme[style].background,color:theme[style].foreground}}>Theme</h3>\r\n           <button onClick={changeColor}>Change Style</button>\r\n           </>\r\n    )\r\n}","import './App.css';\nimport Hook from './Hook';\n\nfunction App() {\n  return (<Hook/>);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}